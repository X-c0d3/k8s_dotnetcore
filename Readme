Right click - Build images 
or
docker build -t k8s_dotnet .

# docker images
# docker ps -a
# docker run -p 5000:80 k8s_dotnet:latest


# kubectl config current-context
# kubectl config get-context

# kubectl config use-context minikube
# kubectl config use-context docker-for-desktop

##
# kubectl proxy


# kubctl get pods
# kubctl get service
# kubctl get deplyments

# kubectl create -f deploy.yaml
# kubctl get pods
# kubectl logs -f k8s-xxxxxxxxxxxxxxxxxxxxxxx

# kunectl apply -f deploy.yaml
# kubctl get pods
# kubectl logs -f k8s-xxxxxxxxxxxxxxxxxxxxxxx

crereate ingress.yaml   (For load balance)
# kubectl create -y ingress.yaml
# kubectl get ingress

# kubectl expose deployment k8s-dotnet --type="NodePort" --port=80
# kubectl expose deployment k8s-dotnet --type="LoadBalancer" --port=80

Scale Services
# kubectl scale --replicas=9 deployment/k8s-dotnet
# kubectl get deploy/k8s-dotnet



# docker stop hardcore_ptolemy




#############################################
 - deploy on Nginx (Ubuntu server)
 vim /etc/nginx/site-enable/default

ufw allow 80
ufw allow 22

server {
    listen 80;
    location / {
        proxy_pass http://localhost:5000;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxt_cache_bypass $http_upgrade;
    }
}

service nginx restart